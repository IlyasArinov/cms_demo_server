{"version":3,"sources":["services/pages.js","Components/Button.js","Components/CMSComponent.js","App.js","index.js"],"names":["id","axios","get","then","response","data","page","put","Button","type","handleClick","text","componentStyle","background","style","onClick","CMSComponent","position","size","content","isNew","useState","newSize","setSize","newPosition","setPosition","data-is_new","data-id","className","bounds","data-x","x","data-y","y","border","display","justifyContent","alignItems","textAlign","top","left","onDragStop","e","d","onResizeStop","event","direction","ref","delta","currentPosition","width","height","App","CMSComponents","setCMSComponents","useEffect","pageService","returnedPage","console","log","components","minWidth","overflow","minHeight","getRandomInt","max","Math","floor","random","newCMSComponent","length","parsedCMSComponents","document","querySelectorAll","changedPage","forEach","c","i","dataset","querySelector","innerHTML","push","catch","map","component","key","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.500539df.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/pages'\n\nconst get = (id) => axios.get(`${baseUrl}/${id}`).then(response => response.data);\nconst update = (id, page) => axios.put(`${baseUrl}/${id}`, page).then(response => response.data);\n\nexport default { get, update };","import React from 'react';\n\nfunction Button({type, handleClick, text}) {\n    const componentStyle = {\n        background: type === 'success' ? '#4caf50' : 'aliceblue',\n    }\n    return (\n        <button type=\"button\" style={componentStyle} onClick={handleClick}>\n            {text}\n        </button>\n    )\n}\n\nexport default Button;","import React, {useState} from 'react';\nimport {Rnd} from 'react-rnd'\n\nfunction CMSComponent({position, size, content, id, isNew}) {\n    const [newSize, setSize] = useState(size);\n    const [newPosition, setPosition] = useState(position);\n\n    const handleDragStop = (e, d) => {\n        setPosition({ x: d.x, y: d.y })\n    }\n    const handleResizeStop = (event, direction, ref, delta, currentPosition) => {\n        setSize({\n            width: ref.style.width,\n            height: ref.style.height\n        });\n        setPosition(currentPosition);\n    };\n\n    const divStyle = {\n        background: 'aliceblue',\n        position: 'absolute',\n        border: '1px solid blue',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center',\n        top: 0,\n        left: 0\n    };\n    return (\n        <Rnd data-is_new={isNew} data-id={id} className=\"CMSComponent\" bounds=\"body\" data-x={newPosition.x} data-y={newPosition.y} style={divStyle} position={newPosition} size={newSize} onDragStop={handleDragStop} onResizeStop={handleResizeStop}>\n            <span className=\"CMSComponentContent\">{content}</span>\n        </Rnd>\n    )\n}\n\nexport default CMSComponent;\n//\n// const handleMousedown = (event) => {\n//     const element = event.target;\n//     const shiftX = event.clientX - element.getBoundingClientRect().left;\n//     const shiftY = event.clientY - element.getBoundingClientRect().top;\n//\n//     const allowTopOverflow = false; //запретить элементу выходить за верхний край страницы\n//     const allowLeftOverflow = true; //разрешить элементу выходить за левый край страницы\n//\n//     const moveVerticallyAt = (elementYCoordinate) => {\n//         if(!allowTopOverflow && elementYCoordinate < 0) {\n//             return;\n//         }\n//         element.style.top = elementYCoordinate + 'px';\n//     }\n//     const moveHorizontallyAt = (elementXCoordinate) => {\n//         if(!allowLeftOverflow && elementXCoordinate < 0) {\n//             return;\n//         }\n//         element.style.left = elementXCoordinate + 'px';\n//     }\n//     const onMouseMove = (event) => {\n//         const elementXCoordinate = event.pageX - shiftX;\n//         const elementYCoordinate = event.pageY - shiftY;\n//         const coordinates = [elementXCoordinate, elementYCoordinate];\n//         moveVerticallyAt(elementYCoordinate);\n//         moveHorizontallyAt(elementXCoordinate);\n//         console.log(coordinates);\n//     }\n//\n//     element.style.position = 'absolute';\n//\n//     // move the element on mousemove\n//     document.addEventListener('mousemove', onMouseMove);\n//\n//     // drop the element, remove unneeded handlers\n//     document.onmouseup = () => {\n//         document.removeEventListener('mousemove', onMouseMove);\n//         document.onmouseup = null;\n//     };\n// };\n//\n// const handleDragstart = function(event) {\n//     event.preventDefault();\n// };","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport pageService from './services/pages';\nimport Button from \"./Components/Button\";\nimport CMSComponent from \"./Components/CMSComponent\";\n\nfunction App() {\n    const [CMSComponents, setCMSComponents] = useState([]);\n    const id = 1; //Пока только одна страница\n    useEffect(() => {\n        pageService\n            .get(id)\n            .then(returnedPage => {\n                console.log(returnedPage)\n                setCMSComponents(returnedPage.components)\n            })\n    }, []);\n\n    const addCMSComponentToBody = () => {\n        const getRandomInt = (max) => {\n            return Math.floor(Math.random() * Math.floor(max));\n        }\n        const newCMSComponent = {\n            position: {x: getRandomInt(300), y: getRandomInt(300)},\n            size: { width: 200, height: 100 },\n            content: 'Новый компонент',\n            isNew: true,\n            id: `tempId-${CMSComponents.length + 1}`\n        }\n        setCMSComponents([...CMSComponents, newCMSComponent ]);\n    }\n\n    const saveCMSComponents = () => {\n        const parsedCMSComponents = document.querySelectorAll('.CMSComponent');\n        const changedPage = {\n            id: id,\n            components: []\n        };\n        //Было бы неплохо, если у компонентов всегда был один и тот же неменяющийся идентификатор\n        parsedCMSComponents.forEach((c, i) => {\n            const data = {\n                id: i + 1,\n                position: {\n                    x: c.dataset.x,\n                    y: c.dataset.y,\n                },\n                size: {\n                    width: c.style.width,\n                    height: c.style.height,\n                },\n                content: c.querySelector('.CMSComponentContent').innerHTML\n            };\n            changedPage.components.push(data)\n        });\n        pageService.update(id, changedPage)\n            .then(returnedPage => {\n                setCMSComponents(returnedPage.components);\n            })\n            .catch(() => {\n                console.log('somethingHappened');\n            });\n    };\n\n  return (\n    <>\n        <div className=\"siteRoot\" style={{ width: '100%', minWidth: 980, overflow: 'hidden', minHeight: '100vh', position: \"relative\" }}>\n            <Button text=\"Добавить компонент\" type=\"normal\" handleClick={addCMSComponentToBody} />\n            <Button text=\"Сохранить\" type=\"success\" handleClick={saveCMSComponents} />\n            {CMSComponents.map(component => <CMSComponent key={component.id} {...component} />)}\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}